/*
MIT License

Copyright (c) 2022 Luiz Mineo

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

module dev.kobu.java.JavaTemplates

import dev.kobu.functions.TemplateFunctions
import dev.kobu.functions.Comparators
import dev.kobu.java.JavaTypes
import dev.kobu.java.OutputJavaTypes

type template JavaMethodBodyTemplate

type template JavaMethodTemplate

fun javaTemplates(): Rule[] {
    return [JavaImportsAssemblerRule, JavaCommentTemplate, JavaFileTemplate, JavaClassTemplate, JavaInterfaceTemplate,
            JavaEnumTemplate, JavaRecordTemplate, JavaClassConstructorTemplate, JavaRecordConstructorTemplate,
            JavaMethodDeclTemplate, JavaAbstractMethodDeclTemplate, JavaInterfaceMethodDeclTemplate,
            JavaMethodParamTemplate, JavaFieldTemplate, JavaFieldWithValueTemplate, JavaAnnotationTemplate,
            JavaAnnotationSingleValueTemplate, JavaEmptyAnnotationTemplate, JavaAnnotationFieldValueTemplate,
            JavaArrayValueTemplate, JavaArrayLiteralValueTemplate, JavaSourceValueTemplate, LiteralJavaValueTemplate,
            LiteralJavaStringTemplate]
}

fun javaMethodBodyTemplates(): Rule[] {
    return [JavaDefaultMethodBodyTemplate, JavaDefaultVoidMethodBodyTemplate,
            JavaDefaultIntMethodBodyTemplate, JavaDefaultFloatMethodBodyTemplate, JavaDefaultDoubleMethodBodyTemplate,
            JavaDefaultBooleanMethodBodyTemplate]
}

fun javaConstructorBodyTemplates(): Rule[] {
    return [JavaDefaultConstructorBodyTemplate]
}

def template JavaDefaultConstructorBodyTemplate
             for OutputJavaConstructor <|

|> as JavaMethodBodyTemplate

def template JavaDefaultMethodBodyTemplate
             for OutputJavaMethod as method <|
return null;
|> as JavaMethodBodyTemplate

def template JavaDefaultVoidMethodBodyTemplate extends JavaDefaultMethodBodyTemplate
             for OutputJavaMethod as method
             when method.returnType instanceof JavaVoidType <|

|> as JavaMethodBodyTemplate

def template JavaDefaultIntMethodBodyTemplate extends JavaDefaultMethodBodyTemplate
             for OutputJavaMethod as method
             when method.returnType.name == "int" or
                  method.returnType.name == "char" or
                  method.returnType.name == "short" or
                  method.returnType.name == "byte" <|
return 0;
|> as JavaMethodBodyTemplate

def template JavaDefaultFloatMethodBodyTemplate
             for OutputJavaMethod as method
             when method.returnType.name == "float" <|
return 0f;
|> as JavaMethodBodyTemplate

def template JavaDefaultDoubleMethodBodyTemplate
             for OutputJavaMethod as method
             when method.returnType.name == "double" <|
return 0.0;
|> as JavaMethodBodyTemplate

def template JavaDefaultBooleanMethodBodyTemplate
             for OutputJavaMethod as method
             when method.returnType.name == "boolean" <|
return false;
|> as JavaMethodBodyTemplate

def template JavaCommentTemplate
             for OutputJavaComment as comment <|
${getComment(comment.text)}
|>


def rule JavaImportsAssemblerRule
         for OutputJavaFile as file
         with *JavaObjectType[] as referencedTypes
         with *OutputJavaAnnotationValue[] as annotations {

    file.imports = referencedTypes
        .filter(t => t.package != null)
        .map(t => t.package + "." + t.name)

    file.imports.addAll(annotations
        .filter(a => a.package != null)
        .map(a => a.package + "." + a.name))

    file.imports.sort(stringComparator)
}

def template JavaFileTemplate
             for OutputJavaFile as file
             join AnyTemplate[] as commentTmpl of file.comments
             join AnyTemplate[] as defTmpl of file.definitions <|
${mkString(commentTmpl, "", "\n\n", "\n")}package ${file.package};

${strJoin(file.imports, "\n", imp => "import " + imp + ";")}
${strJoin(defTmpl, "\n")}
|>

def template JavaClassTemplate
             for OutputJavaClass as class
             join AnyTemplate[] as commentTmpl of class.comments
             join AnyTemplate[] as annTmpl of class.annotations
             join JavaMethodTemplate[] as consTmpl of class.constructors
             join JavaMethodTemplate[] as methodsTmpl of class.methods
             join AnyTemplate[] as fieldsTmpl of class.fields
             join AnyTemplate[] as innerClassesTmpl of class.innerClasses
             join AnyTemplate[] as innerInterfacesTmpl of class.innerInterfaces
             join AnyTemplate[] as innerEnumsTmpl of class.innerEnums
             join AnyTemplate[] as innerRecordsTmpl of class.innerRecords <|
${strJoin(flat([commentTmpl, annTmpl]), "\n")}
${getJavaClassSignature(class)} {
    ${mkString(flat([fieldsTmpl, consTmpl, methodsTmpl, innerClassesTmpl, innerInterfacesTmpl, innerEnumsTmpl, innerRecordsTmpl]), "", "\n", "\n")}
}
|>

def template JavaInterfaceTemplate
             for OutputJavaInterface as interface
             join AnyTemplate[] as commentTmpl of interface.comments
             join AnyTemplate[] as annTmpl of interface.annotations
             join JavaMethodTemplate[] as methodsTmpl of interface.methods
             join AnyTemplate[] as fieldsTmpl of interface.fields
             join AnyTemplate[] as innerClassesTmpl of interface.innerClasses
             join AnyTemplate[] as innerInterfacesTmpl of interface.innerInterfaces
             join AnyTemplate[] as innerEnumsTmpl of interface.innerEnums
             join AnyTemplate[] as innerRecordsTmpl of interface.innerRecords <|
${strJoin(flat([commentTmpl, annTmpl]), "\n")}
${getJavaInterfaceSignature(interface)} {
    ${mkString(flat([fieldsTmpl, methodsTmpl, innerClassesTmpl, innerInterfacesTmpl, innerEnumsTmpl, innerRecordsTmpl]), "\n", "\n", "\n")}
}
|>

def template JavaEnumTemplate
             for OutputJavaEnum as javaEnum
             join AnyTemplate[] as commentTmpl of javaEnum.comments
             join AnyTemplate[] as annTmpl of javaEnum.annotations
             join AnyTemplate[] as valuesTmpl of javaEnum.values
             join JavaMethodTemplate[] as consTmpl of javaEnum.constructors
             join JavaMethodTemplate[] as methodsTmpl of javaEnum.methods
             join AnyTemplate[] as fieldsTmpl of javaEnum.fields
             join AnyTemplate[] as innerClassesTmpl of javaEnum.innerClasses
             join AnyTemplate[] as innerInterfacesTmpl of javaEnum.innerInterfaces
             join AnyTemplate[] as innerEnumsTmpl of javaEnum.innerEnums
             join AnyTemplate[] as innerRecordsTmpl of javaEnum.innerRecords <|
${strJoin(flat([commentTmpl, annTmpl]), "\n")}
${getJavaEnumSignature(javaEnum)} {
    ${mkString(valuesTmpl, "", ",\n", ";")}
    ${mkString(flat([fieldsTmpl, consTmpl, methodsTmpl, innerClassesTmpl, innerInterfacesTmpl, innerEnumsTmpl, innerRecordsTmpl]), "\n", "\n", "\n")}
}
|>

def template JavaRecordTemplate
             for OutputJavaRecord as javaRecord
             join AnyTemplate[] as commentTmpl of javaRecord.comments
             join AnyTemplate[] as annTmpl of javaRecord.annotations
             join AnyTemplate[] as compTmpl of javaRecord.components
             join JavaMethodTemplate[] as consTmpl of javaRecord.constructors
             join JavaMethodTemplate[] as methodsTmpl of javaRecord.methods
             join AnyTemplate[] as fieldsTmpl of javaRecord.fields
             join AnyTemplate[] as innerClassesTmpl of javaRecord.innerClasses
             join AnyTemplate[] as innerInterfacesTmpl of javaRecord.innerInterfaces
             join AnyTemplate[] as innerEnumsTmpl of javaRecord.innerEnums
             join AnyTemplate[] as innerRecordsTmpl of javaRecord.innerRecords <|
${strJoin(flat([commentTmpl, annTmpl]), "\n")}
${getJavaRecordHeader(javaRecord)}(${strJoin(compTmpl, ",\n")})${getJavaRecordInterfaces(javaRecord)} {
    ${mkString(flat([fieldsTmpl, consTmpl, methodsTmpl, innerClassesTmpl, innerInterfacesTmpl, innerEnumsTmpl, innerRecordsTmpl]), "\n", "\n", "\n")}
}
|>

def template JavaClassConstructorTemplate
             for OutputJavaClass as class / constructors[*] as cons
             join AnyTemplate[] as commentTmpl of cons.comments
             join AnyTemplate[] as annTmpl of cons.annotations
             join AnyTemplate[] as paramTmpl of cons.parameters
             join JavaMethodBodyTemplate as body of cons <|
${strJoin(flat([commentTmpl, annTmpl]), "\n")}
${getJavaConstructorHeader(class.name, cons)}(${strPartitionJoin(paramTmpl, 3, ", ", ",\n")})${mkString(cons.throws, " throws ", ", ", "")} {
    ${body}
}
|> as JavaMethodTemplate

def template JavaRecordConstructorTemplate
             for OutputJavaRecord as record / constructors[*] as cons
             join AnyTemplate[] as commentTmpl of cons.comments
             join AnyTemplate[] as annTmpl of cons.annotations
             join AnyTemplate[] as paramTmpl of cons.parameters
             join JavaMethodBodyTemplate as body of cons <|
${strJoin(flat([commentTmpl, annTmpl]), "\n")}
${getJavaConstructorHeader(record.name, cons)}(${strPartitionJoin(paramTmpl, 3, ", ", ",\n")})${mkString(cons.throws, " throws ", ", ", "")} {
    ${body}
}
|> as JavaMethodTemplate

def template JavaMethodDeclTemplate
             for OutputJavaMethod as method22
             join AnyTemplate[] as commentTmpl of method22.comments
             join AnyTemplate[] as annTmpl of method22.annotations
             join AnyTemplate[] as paramTmpl of method22.parameters
             join JavaMethodBodyTemplate as bodyAsdf of method22 <|
${mkString(flat([commentTmpl, annTmpl]), "\n", "\n", "")}
${getJavaMethodHeader(method22)}(${strPartitionJoin(paramTmpl, 3, ", ", ",\n")})${mkString(method22.throws, " throws ", ", ", "")} {
    ${bodyAsdf}
}
|> as JavaMethodTemplate

def template JavaInterfaceMethodDeclTemplate extends JavaMethodDeclTemplate
             for OutputJavaInterface / methods[*] as method
             join AnyTemplate[] as commentTmpl of method.comments
             join AnyTemplate[] as annTmpl of method.annotations
             join AnyTemplate[] as paramTmpl of method.parameters <|
${mkString(flat([commentTmpl, annTmpl]), "\n", "\n", "")}
${getJavaMethodHeader(method)}(${strPartitionJoin(paramTmpl, 3, ", ", ",\n")})${mkString(method.throws, " throws ", ", ", "")};
|> as JavaMethodTemplate

def template JavaAbstractMethodDeclTemplate extends JavaMethodDeclTemplate
             for OutputJavaMethod as method
             join AnyTemplate[] as commentTmpl of method.comments
             join AnyTemplate[] as annTmpl of method.annotations
             join AnyTemplate[] as paramTmpl of method.parameters
             when method.modifiers != null and method.modifiers.contains("abstract") <|
${mkString(flat([commentTmpl, annTmpl]), "\n", "\n", "")}
${getJavaMethodHeader(method)}(${strPartitionJoin(paramTmpl, 3, ", ", ",\n")})${mkString(method.throws, " throws ", ", ", "")};
|> as JavaMethodTemplate

def template JavaMethodParamTemplate
             for OutputJavaMethodParameter as param
             join AnyTemplate[] as annTmpl of param.annotations <|
${strJoin(annTmpl, " ")}${getParam(param)}
|>

def template JavaFieldTemplate
             for OutputJavaField as field
             join AnyTemplate[] as commentTmpl of field.comments
             join AnyTemplate[] as annTmpl of field.annotations <|
${mkString(flat([commentTmpl, annTmpl]), "\n", "\n", "")}
${getJavaFieldDecl(field)};
|>

def template JavaFieldWithValueTemplate extends JavaFieldTemplate
             for OutputJavaField as field
             join AnyTemplate[] as commentTmpl of field.comments
             join AnyTemplate[] as annTmpl of field.annotations
             join AnyTemplate as valueTmpl of field.value <|
${mkString(flat([commentTmpl, annTmpl]), "\n", "\n", "")}
${getJavaFieldDecl(field)} = ${valueTmpl};
|>

def template JavaAnnotationTemplate
             for OutputJavaAnnotationValue as ann
             join AnyTemplate[] as fieldsTmpl of ann.fields <|
@${ann.name}(
    ${strJoin(fieldsTmpl, ",\n")}
)
|>

def template JavaAnnotationSingleValueTemplate extends JavaAnnotationTemplate
             for OutputJavaAnnotationValue as ann
             join AnyTemplate[] as valuesTmpl of ann.fields.map(f => f.value)
             when ann.fields.size() == 1 and ann.fields[0].field == "value" <|
@${ann.name}($^{valuesTmpl[0]})
|>

def template JavaEmptyAnnotationTemplate extends JavaAnnotationTemplate
             for OutputJavaAnnotationValue as ann
             join AnyTemplate[] as valuesTmpl of ann.fields.map(f => f.value)
             when ann.fields.size() == 0 <|
@${ann.name}()
|>

def template JavaAnnotationFieldValueTemplate
             for OutputJavaAnnotationFieldValue as field
             join AnyTemplate as valueTmpl of field.value <|
${field.field}=$^{valueTmpl}
|>

def template JavaArrayValueTemplate
             for OutputJavaArrayValue as arr
             join AnyTemplate[] as valuesTmpl of arr.value <|
{
    ${strJoin(valuesTmpl, ",\n")}
}
|>

def template JavaArrayLiteralValueTemplate extends JavaArrayValueTemplate
             for OutputJavaArrayValue as arr
             join AnyTemplate[] as valuesTmpl of arr.value
             when arr.value == null or arr.value.every(v => v instanceof OutputJavaLiteralValue) <|
{${strJoin(valuesTmpl, ", ")}}
|>

def template JavaSourceValueTemplate
             for OutputJavaSource as javaSource <|
${javaSource.source}
|>

def template LiteralJavaValueTemplate
             for OutputJavaLiteralValue as javaValue <|
${javaValue.value}
|>

def template LiteralJavaStringTemplate extends LiteralJavaValueTemplate
             for OutputJavaLiteralValue as javaValue
             when javaValue.value instanceof string <|
"${(javaValue.value as string).escape()}"
|>

private fun getJavaClassSignature(javaClass: OutputJavaClass): string {
    return mkString(javaClass.modifiers, "", " ", " ") +
            "class " + javaClass.name +
            mkString(javaClass.typeParameters, "<", ", ", ">") +
            ifNotNull(javaClass.superType, () => " extends " + getJavaType(javaClass.superType)) +
            mkString(javaClass.implements, " implements ", ", ", "")
}

private fun getJavaInterfaceSignature(javaInterface: OutputJavaInterface): string {
    return mkString(javaInterface.modifiers, "", " ", " ") +
            "interface " + javaInterface.name +
            mkString(javaInterface.typeParameters, "<", ", ", ">") +
            mkString(javaInterface.superTypes, " extends ", ", ", "")
}

private fun getJavaEnumSignature(javaEnum: OutputJavaEnum): string {
    return mkString(javaEnum.modifiers, "", " ", " ") +
            "enum " + javaEnum.name +
            mkString(javaEnum.implements, " implements ", ", ", "")
}

private fun getJavaRecordHeader(javaRecord: OutputJavaRecord): string {
    return mkString(javaRecord.modifiers, "", " ", " ") +
            "record " + javaRecord.name +
            mkString(javaRecord.typeParameters, "<", ", ", ">")
}

private fun getJavaRecordInterfaces(javaRecord: OutputJavaRecord): string {
    return mkString(javaRecord.implements, " implements ", ", ", "")
}

private fun getJavaConstructorHeader(name: string, constructor: OutputJavaConstructor): string {
    return mkString(constructor.modifiers, "", " ", " ") +
           mkString(constructor.typeParameters, "<", ", ", "> ") +
           name
}

private fun getJavaMethodHeader(method: OutputJavaMethod): string {
    return mkString(method.modifiers, "", " ", " ") +
           mkString(method.typeParameters, "<", ", ", "> ") +
           getJavaType(method.returnType) + " " + method.name
}

private fun getJavaFieldDecl(field: OutputJavaField): string {
    return mkString(field.modifiers, "", " ", " ") +
           getJavaType(field.fieldType) + " " + field.name
}

private fun getParam(param: OutputJavaMethodParameter): string {
    return ifNotBlank(param.modifier, () => param.modifier + " ") +
           getJavaType(param.paramType) +
           ifThenElse(param.varArg, () => "... ", () => " ") +
           param.paramName
}

private fun getJavaType(javaType: JavaType): string {
    if (javaType instanceof JavaPrimitiveType) {
        return javaType.name
    } else if (javaType instanceof JavaVoidType) {
        return "void"
    } else if (javaType instanceof JavaObjectType) {
        var objType = javaType as JavaObjectType
        var str = objType.name
        str = str + mkString(objType.typeArgs, "<", ", ", ">")
        if (objType.innerType != null) {
            str = str + "." + getJavaType(objType.innerType)
        }
        return str
    }
    return ""
}

private fun getComment(comment: string): string {
    if (not comment.contains("\n")) {
        return "// " + comment
    }
    var lines = comment.split("\n")
    return mkString(lines, "/**\n * ", "\n * ", "\n**/")
}