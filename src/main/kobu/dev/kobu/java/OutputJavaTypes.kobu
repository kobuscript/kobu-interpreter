/*
MIT License

Copyright (c) 2022 Luiz Mineo

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

module dev.kobu.java.OutputJavaTypes

import dev.kobu.java.JavaTypes

fun newJavaFile(package: string): OutputJavaFile {
    return OutputJavaFile{
        package: package,
        imports: [],
        definitions: []
    }
}

fun newJavaClass(name: string, modifiers: string[], typeParameters?: string[]): OutputJavaClass {
    return OutputJavaClass{
        name: name,
        modifiers: modifiers,
        annotations: [],
        typeParameters: typeParameters,
        implements: [],
        constructors: [],
        methods: [],
        fields: [],
        innerClasses: [],
        innerInterfaces: [],
        innerEnums: [],
        innerRecords: []
    }
}

fun newJavaPublicClass(name: string, typeParameters?: string[]): OutputJavaClass {
    return newJavaClass(name, ["public"], typeParameters)
}

fun newJavaPublicAbstractClass(name: string, typeParameters?: string[]): OutputJavaClass {
    return newJavaClass(name, ["public", "abstract"], typeParameters)
}

fun newJavaPublicStaticClass(name: string, typeParameters?: string[]): OutputJavaClass {
    return newJavaClass(name, ["public", "static"], typeParameters)
}

fun newJavaPrivateStaticClass(name: string, typeParameters?: string[]): OutputJavaClass {
    return newJavaClass(name, ["private", "static"], typeParameters)
}

fun addAnnotation(javaDef: OutputJavaDefinition,
                  annotation: OutputJavaAnnotationValue): void {
    javaDef.annotations.add(annotation)
}

fun addAnnotations(javaDef: OutputJavaDefinition,
                   annotations: OutputJavaAnnotationValue[]): void {
    javaDef.annotations.addAll(annotations)
}

fun javaAnnotation(package: string, name: string, fields?: (string, OutputJavaValue)[]): OutputJavaAnnotationValue {
    var annFields: OutputJavaAnnotationFieldValue[] = []
    if (fields != null) {
        fields.forEach(pair => {
            annFields.add(OutputJavaAnnotationFieldValue{
                field: pair.get1(),
                value: pair.get2()
            })
        })
    }

    return OutputJavaAnnotationValue{
        package: package,
        name: name,
        fields: annFields
    }
}

fun javaAnnotationWithValue(package: string, name: string, value: OutputJavaValue): OutputJavaAnnotationValue {
    return javaAnnotation(package, name, [("value", value)])
}

fun javaLiteralValue(value: AnyVal): OutputJavaLiteralValue {
    return OutputJavaLiteralValue{
        value: value
    }
}

fun javaSource(source: string): OutputJavaSource {
    return OutputJavaSource{
        source: source
    }
}

fun javaArray(values: OutputJavaValue[]): OutputJavaArrayValue {
    return OutputJavaArrayValue{
        value: values
    }
}

fun javaIntType(): JavaType {
    return JavaIntType{}
}

fun javaCharType(): JavaType {
    return JavaCharType{}
}

fun javaByteType(): JavaType {
    return JavaByteType{}
}

fun javaShortType(): JavaType {
    return JavaShortType{}
}

fun javaLongType(): JavaType {
    return JavaLongType{}
}

fun javaFloatType(): JavaType {
    return JavaFloatType{}
}

fun javaDoubleType(): JavaType {
    return JavaDoubleType{}
}

fun javaBooleanType(): JavaType {
    return JavaBooleanType{}
}

fun javaVoidType(): JavaType {
    return JavaVoidType{}
}

fun javaObjectType(package: string, name: string, typeArgs?: JavaObjectType[], innerType?: JavaObjectType): JavaObjectType {
    return JavaObjectType{
        package: package,
        name: name,
        typeArgs: typeArgs,
        innerType: innerType
    }
}

fun javaParam(paramName: string, paramType: JavaType, annotations?: OutputJavaAnnotationValue[],
              varArg?: boolean, final?: boolean): OutputJavaMethodParameter {
    var modifier: string = null
    if (final) {
        modifier = "final"
    }
    return OutputJavaMethodParameter{
        paramName: paramName,
        paramType: paramType,
        annotations: annotations,
        varArg: varArg,
        modifier: modifier
    }
}

fun javaConstructor(modifiers: string[], params: OutputJavaMethodParameter[],
                    annotations?: OutputJavaAnnotationValue[], typeParameters?: string[],
                    throws?: JavaObjectType[]): OutputJavaConstructor {
    return OutputJavaConstructor{
        typeParameters: typeParameters,
        modifiers: modifiers,
        annotations: annotations,
        parameters: params,
        throws: throws
    }
}

fun javaPublicConstructor(params: OutputJavaMethodParameter[],
                          annotations?: OutputJavaAnnotationValue[], typeParameters?: string[],
                          throws?: JavaObjectType[]): OutputJavaConstructor {
    return javaConstructor(["public"], params, annotations, typeParameters, throws)
}

fun javaPrivateConstructor(params: OutputJavaMethodParameter[],
                           annotations?: OutputJavaAnnotationValue[], typeParameters?: string[],
                           throws?: JavaObjectType[]): OutputJavaConstructor {
    return javaConstructor(["private"], params, annotations, typeParameters, throws)
}

fun javaMethod(modifiers: string[], name: string, params: OutputJavaMethodParameter[], returnType: JavaType,
               annotations?: OutputJavaAnnotationValue[], typeParameters?: string[],
               throws?: JavaObjectType[]): OutputJavaMethod {
    return OutputJavaMethod{
        name: name,
        typeParameters: typeParameters,
        modifiers: modifiers,
        annotations: annotations,
        parameters: params,
        returnType: returnType,
        throws: throws
    }
}

fun javaPublicMethod(name: string, params: OutputJavaMethodParameter[], returnType: JavaType,
                     annotations?: OutputJavaAnnotationValue[], typeParameters?: string[],
                     throws?: JavaObjectType[]): OutputJavaMethod {
    return javaMethod(["public"], name, params, returnType, annotations, typeParameters, throws)
}

fun javaAbstractMethod(name: string, params: OutputJavaMethodParameter[], returnType: JavaType,
                       annotations?: OutputJavaAnnotationValue[], typeParameters?: string[],
                       throws?: JavaObjectType[]): OutputJavaMethod {
    return javaMethod(["abstract"], name, params, returnType, annotations, typeParameters, throws)
}

fun javaPublicAbstractMethod(name: string, params: OutputJavaMethodParameter[], returnType: JavaType,
                             annotations?: OutputJavaAnnotationValue[], typeParameters?: string[],
                             throws?: JavaObjectType[]): OutputJavaMethod {
    return javaMethod(["public", "abstract"], name, params, returnType, annotations, typeParameters, throws)
}

fun javaStaticPublicMethod(name: string, params: OutputJavaMethodParameter[], returnType: JavaType,
                           annotations?: OutputJavaAnnotationValue[], typeParameters?: string[],
                           throws?: JavaObjectType[]): OutputJavaMethod {
    return javaMethod(["static", "public"], name, params, returnType, annotations, typeParameters, throws)
}

fun javaProtectedMethod(name: string, params: OutputJavaMethodParameter[], returnType: JavaType,
                        annotations?: OutputJavaAnnotationValue[], typeParameters?: string[],
                        throws?: JavaObjectType[]): OutputJavaMethod {
    return javaMethod(["protected"], name, params, returnType, annotations, typeParameters, throws)
}

fun javaProtectedAbstractMethod(name: string, params: OutputJavaMethodParameter[], returnType: JavaType,
                                annotations?: OutputJavaAnnotationValue[], typeParameters?: string[],
                                throws?: JavaObjectType[]): OutputJavaMethod {
    return javaMethod(["protected", "abstract"], name, params, returnType, annotations, typeParameters, throws)
}

fun javaPrivateMethod(name: string, params: OutputJavaMethodParameter[], returnType: JavaType,
                      annotations?: OutputJavaAnnotationValue[], typeParameters?: string[],
                      throws?: JavaObjectType[]): OutputJavaMethod {
    return javaMethod(["private"], name, params, returnType, annotations, typeParameters, throws)
}

type record OutputJavaValue {}

type record OutputJavaLiteralValue extends OutputJavaValue {
    value: AnyVal
}

type record OutputJavaSource extends OutputJavaValue {
    source: string
}

type record OutputJavaArrayValue extends OutputJavaValue {
    value: OutputJavaValue[]
}

type record OutputJavaFile {
    comment: string,
    package: string,
    imports: string[],
    definitions: OutputJavaDefinition[]
}

type record OutputJavaDefinition {
    comment: string,
    name: string,
    annotations: OutputJavaAnnotationValue[],
    modifiers: string[],
    typeParameters: string[]
}

type record OutputJavaClass extends OutputJavaDefinition {
    superType: JavaObjectType,
    implements: JavaObjectType[],
    constructors: OutputJavaConstructor[],
    methods: OutputJavaMethod[],
    fields: OutputJavaField[],
    innerClasses: OutputJavaClass[],
    innerInterfaces: OutputJavaInterface[],
    innerEnums: OutputJavaEnum[],
    innerRecords: OutputJavaRecord[]
}

type record OutputJavaInterface extends OutputJavaDefinition {
    superTypes: JavaObjectType[],
    methods: OutputJavaMethod[],
    fields: OutputJavaField[],
    innerClasses: OutputJavaClass[],
    innerInterfaces: OutputJavaInterface[],
    innerEnums: OutputJavaEnum[],
    innerRecords: OutputJavaRecord[]
}

type record OutputJavaEnum extends OutputJavaDefinition {
    implements: JavaObjectType[],
    values: OutputJavaEnumValue[],
    constructors: OutputJavaConstructor[],
    methods: OutputJavaMethod[],
    fields: OutputJavaField[],
    innerClasses: OutputJavaClass[],
    innerInterfaces: OutputJavaInterface[],
    innerEnums: OutputJavaEnum[],
    innerRecords: OutputJavaRecord[]
}

type record OutputJavaEnumValue {
    name: string,
    args: OutputJavaValue[]
}

type record OutputJavaRecord extends OutputJavaDefinition {
    implements: JavaObjectType[],
    components: OutputJavaRecordComponent[],
    constructors: OutputJavaConstructor[],
    methods: OutputJavaMethod[],
    fields: OutputJavaField[],
    innerClasses: OutputJavaClass[],
    innerInterfaces: OutputJavaInterface[],
    innerEnums: OutputJavaEnum[],
    innerRecords: OutputJavaRecord[]
}

type record OutputJavaRecordComponent {
    annotations: OutputJavaAnnotationValue[],
    name: string,
    fieldType: JavaType
}

type record OutputJavaConstructor {
    comment: string,
    typeParameters: string[],
    modifiers: string[],
    annotations: OutputJavaAnnotationValue[],
    parameters: OutputJavaMethodParameter[],
    throws: JavaObjectType[]
}

type record OutputJavaMethod {
    comment: string,
    typeParameters: string[],
    name: string,
    modifiers: string[]
    returnType: JavaType,
    parameters: OutputJavaMethodParameter[],
    throws: JavaObjectType[],
    annotations: OutputJavaAnnotationValue[]
}

type record OutputJavaField {
    comment: string,
    name: string,
    modifiers: string[],
    annotations: OutputJavaAnnotationValue[],
    fieldType: JavaType,
    value: OutputJavaValue
}

type record OutputJavaAnnotationValue extends OutputJavaValue {
    package: string,
    name: string,
    fields: OutputJavaAnnotationFieldValue[]
}

type record OutputJavaAnnotationFieldValue {
    field: string,
    value: OutputJavaValue
}

type record OutputJavaMethodParameter {
    paramName: string,
    paramType: JavaType,
    annotations: OutputJavaAnnotationValue[],
    modifier: string,
    varArg: boolean
}
