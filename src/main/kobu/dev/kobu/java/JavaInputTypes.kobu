/*
MIT License

Copyright (c) 2022 Luiz Mineo

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

module dev.kobu.java.JavaInputTypes

type record JavaType {}

type record JavaPrimitiveType extends JavaType {}

type record JavaIntType extends JavaPrimitiveType {}

type record JavaCharType extends JavaPrimitiveType {}

type record JavaByteType extends JavaPrimitiveType {}

type record JavaShortType extends JavaPrimitiveType {}

type record JavaLongType extends JavaPrimitiveType {}

type record JavaFloatType extends JavaPrimitiveType {}

type record JavaDoubleType extends JavaPrimitiveType {}

type record JavaBooleanType extends JavaPrimitiveType {}

type record JavaVoidType extends JavaType {}

type record JavaObjectType extends JavaType {
    package: string,
    name: string,
    typeArgs: JavaObjectType[],
    innerType: JavaObjectType
}

type record JavaImport {
    qualifiedName: string
}

type record JavaFile {
    file: File,
    package: string,
    imports: JavaImport[],
    definitions: JavaDefinition[]
}

type record JavaDefinition {
    file: File,
    name: string,
    abstract: boolean,
    final: boolean,
    static: boolean,
    publicAccess: boolean,
    privateAccess: boolean,
    protectedAccess: boolean,
    annotations: JavaAnnotationValue[]
}

type record JavaClass extends JavaDefinition {
    typeParameters: JavaTypeParameter[],
    superType: JavaObjectType,
    implements: JavaObjectType[],
    constructors: JavaConstructor[],
    fields: JavaField[],
    methods: JavaMethod[],
    innerClasses: JavaClass[],
    innerInterfaces: JavaInterface[],
    innerEnums: JavaEnum[],
    innerRecords: JavaRecord[]
}

type record JavaInterface extends JavaDefinition {
    typeParameters: JavaTypeParameter[],
    superTypes: JavaObjectType[],
    fields: JavaField[],
    methods: JavaMethod[],
    innerClasses: JavaClass[],
    innerInterfaces: JavaInterface[],
    innerEnums: JavaEnum[],
    innerRecords: JavaRecord[]
}

type record JavaRecord extends JavaDefinition {
    typeParameters: JavaTypeParameter[],
    implements: JavaObjectType[],
    components: JavaRecordComponent[],
    fields: JavaField[],
    constructors: JavaConstructor[],
    methods: JavaMethod[],
    innerClasses: JavaClass[],
    innerInterfaces: JavaInterface[],
    innerEnums: JavaEnum[],
    innerRecords: JavaRecord[]
}

type record JavaRecordComponent {
    annotations: JavaAnnotationValue[],
    name: string,
    fieldType: JavaType
}

type record JavaEnum extends JavaDefinition {
    implements: JavaObjectType[],
    values: JavaEnumValue[],
    constructors: JavaConstructor[],
    methods: JavaMethod[],
    fields: JavaField[],
    innerClasses: JavaClass[],
    innerInterfaces: JavaInterface[],
    innerEnums: JavaEnum[],
    innerRecords: JavaRecord[]
}

type record JavaEnumValue {
    name: string,
    args: JavaValue[]
}

type record JavaTypeParameter {
    alias: string
}

type record JavaAnnotationValue extends JavaValue {
    package: string,
    name: string,
    fields: JavaAnnotationFieldValues
}

type record JavaAnnotationFieldValues {
    *: JavaValue
}

type record JavaClassMember {
    publicAccess: boolean,
    privateAccess: boolean,
    protectedAccess: boolean,
    static: boolean,
    abstract: boolean,
    final: boolean,
    default: boolean,
    annotations: JavaAnnotationValue[]
}

type record JavaConstructor extends JavaClassMember {
    typeParameters: JavaTypeParameter[],
    parameters: JavaMethodParameter[]
}

type record JavaMethod extends JavaClassMember {
    typeParameters: JavaTypeParameter[],
    name: string,
    returnType: JavaType,
    parameters: JavaMethodParameter[],
    annotations: JavaAnnotationValue[]
}

type record JavaMethodParameter {
    paramName: string,
    paramType: JavaType,
    annotations: JavaAnnotationValue[],
    final: boolean,
    varArg: boolean
}

type record JavaField extends JavaClassMember {
    name: string,
    fieldType: JavaType,
    value: JavaValue
}

type record JavaValue {}

type record JavaAttributeReference extends JavaValue {
    typePackage: string,
    typeName: string,
    attributeName: string
}

type record JavaClassReference extends JavaValue {
    typePackage: string,
    typeName: string
}

type record JavaArrayValue extends JavaValue {
    items: JavaValue[]
}

type record JavaLiteralValue extends JavaValue {
    source: string
}

type record JavaLiteralString extends JavaLiteralValue {
    value: string
}

type record JavaLiteralInt extends JavaLiteralValue {
    originalRadix: number,
    value: number
}

type record JavaLiteralFloat extends JavaLiteralValue {
    originalRadix: number,
    value: number
}

type record JavaLiteralChar extends JavaLiteralValue {
    value: string
}

type record JavaLiteralBoolean extends JavaLiteralValue {
    value: boolean
}