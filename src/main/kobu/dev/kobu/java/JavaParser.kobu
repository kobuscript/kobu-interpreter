/*
MIT License

Copyright (c) 2022 Luiz Mineo

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

module dev.kobu.java.JavaParser

import dev.kobu.java.JavaTypes
import dev.kobu.java.InputJavaTypes

type record JavaFilter {
    typeAnnotations: JavaAnnotationFilter[],
    superType: JavaTypeFilter,
    implements: JavaTypeFilter[],
    name: string
}

type record JavaAnnotationFilter {
    package: string,
    name: string
}

type record JavaTypeFilter {
    package: string,
    name: string
}

fun newJavaFilter(name?: string): JavaFilter {
    return JavaFilter{
        name: name,
        typeAnnotations: [],
        implements: []
    }
}

fun addTypeAnnotationFilter(filter: JavaFilter, annName: string, annPackage?: string): void {
    filter.typeAnnotations.add(JavaAnnotationFilter{
        package: annPackage,
        name: annName
    })
}

fun setSuperTypeFilter(filter: JavaFilter, typeName: string, typePackage?: string): void {
    filter.superType = JavaTypeFilter{
        package: typePackage,
        name: typeName
    }
}

fun addInterfaceFilter(filter: JavaFilter, typeName: string, typePackage?: string): void {
    filter.implements.add(JavaTypeFilter{
        package: typePackage,
        name: typeName
    })
}

/**
 * Parse all Java files in the specified directory whose filename matches the specified pattern.
 *
 * If 'recursive' is true, this function will scan all subdirectories of 'dir'.
 */
def native parseJava(dir: Path, pattern: string, recursive?: boolean, filter?: JavaFilter): InputJavaFile[];

/**
 * Parse a single Java file
 */
fun parseJavaFile(javaFilePath: string): InputJavaFile {
    var filePath = Path([javaFilePath])
    var javaFiles = parseJava(filePath.getParent(), filePath.getFileName().toString())
    if (javaFiles.size() > 0) {
        return javaFiles[0]
    }
    return null
}

/**
 * Returns the root directory of a Java file.
 *
 * The root directory is the directory that contains the file's package.
 */
fun getJavaRootDir(javaFile: InputJavaFile): Path {
    var parts = javaFile.package.split("\\.")
    var filePath = javaFile.file.getPath()
    var rootDir = filePath
    for (var i = 0; i < parts.length(); i++) {
        rootDir = rootDir.getParent()
    }
    return rootDir
}

/**
 * Returns the path of a java file, denoted by it's package and name.
 *
 */
fun getJavaFilePath(rootDir: Path, package: string, name: string): Path {
    var parts = package.split("\\.")
    parts.add(name + ".java")
    return rootDir.resolve(Path(parts))
}

/**
 * Locates and parses the super class of a given class. If the class doesn't have a super type or
 * the super type source file cannot be found, it returns null.
 */
fun parseJavaSuperType(javaClass: InputJavaClass): InputJavaClass {
    if (javaClass.superType != null) {
        var pkg = javaClass.superType.package
        if (pkg == null) {
            pkg = javaClass.javaFile.package
        }

        var rootDir = getJavaRootDir(javaClass.javaFile)
        var superTypeFilePath = getJavaFilePath(rootDir, pkg, javaClass.superType.name)
        var javaFile: InputJavaFile = null
        if (not File(superTypeFilePath).exists()) {
            var javaFileList = parseJava(superTypeFilePath.getParent(), ".java", true, newJavaFilter(javaClass.superType.name))
            if (javaFileList.size() > 0) {
                javaFile = javaFileList[0]
            } else {
                return null
            }
        } else {
            javaFile = parseJavaFile(superTypeFilePath.toString())
        }
        var javaClass: InputJavaClass = null;
        for (var javaDef of javaFile.definitions) {
            if (javaDef.name == javaClass.superType.name and javaDef instanceof InputJavaClass) {
                javaClass = javaDef as InputJavaClass
            }
        }
        if (javaClass != null) {
            var innerType = javaClass.superType.innerType;
            while (innerType != null) {
                var innerClass = javaClass.innerClasses.find(cl => cl.name == innerType.name)
                if (innerClass == null) {
                    return null
                }
                javaClass = innerClass
                innerType = innerType.innerType
            }
        }
        return javaClass
    }
    return null
}

/**
 * Get all fields of a java class, including inherited ones.
 */
fun getAllJavaClassFields(javaClass: InputJavaClass): InputJavaField[] {
    var fields: InputJavaField[] = []
    var superType = parseJavaSuperType(javaClass)
    if (superType != null) {
        fields.addAll(getAllJavaClassFields(superType))
    }
    fields.addAll(javaClass.fields)
    return fields
}

/**
 * Get all methods of a java class, including inherited ones.
 */
fun getAllJavaClassMethods(javaClass: InputJavaClass): InputJavaMethod[] {
    var methods: InputJavaMethod[] = []
    var superType = parseJavaSuperType(javaClass)
    if (superType != null) {
        methods.addAll(getAllJavaClassMethods(superType))
    }
    methods.addAll(javaClass.methods)
    return methods
}