/*
MIT License

Copyright (c) 2022 Luiz Mineo

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

module dev.kobu.codec.Csv

// CSV predefined formats

const CSV_DEFAULT_FORMAT = "Default"

const CSV_EXCEL_FORMAT = "Excel"

const CSV_MONGO_FORMAT = "MongoDBCsv"

const TSV_MONGO_FORMAT = "MongoDBTsv"

const CSV_MYSQL_FORMAT = "MySQL"

const CSV_ORACLE_FORMAT = "Oracle"

const CSV_POSTGRESSQL_FORMAT = "PostgreSQLCsv"

const CSV_POSGRESSQL_TEXT_FORMAT = "PostgreSQLText"

const TDF_FORMAT = "TDF"

// CSV record types

type record CsvFile {
    file: File,
    rows: CsvRow[]
}

type record CsvRow {
    index: number,
    columns: CsvColumn[]
}

type record CsvColumn {
    rowIndex: number,
    index: number,
    value: string
}

/*
 * Read CSV files.
 *
 * The 'pattern' argument can be a single filename or a glob pattern (like "*.csv"), If 'recursive' is
 * true, then all subdirectories will be scanned. Use 'format' to specify the file format,
 * and 'charset' to specify the file charset.
 */
def native readCsv(dir: Path, pattern: string, recursive?: boolean, format?: string, charset?: string): CsvFile[];

/**
 * Parse a single CSV file
 */
fun readCsvFile(csvFilePath: string): CsvFile {
    var filePath = Path([csvFilePath])
    var csvFiles = readCsv(filePath.getParent(), filePath.getFileName().toString())
    if (csvFiles.size() > 0) {
        return csvFiles[0]
    }
    return null
}