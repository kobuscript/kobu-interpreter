/*
MIT License

Copyright (c) 2022 Luiz Mineo

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

module dev.kobu.codec.Xml

type record XmlMapping<T> {
    rootRecord: RecordType<T>,
    aliases: RecordAlias[],
    attrAliases: RecordAttributeAlias[],
    implicitCollections: ImplicitCollection[],
    tagAttributes: TagAttribute[]
}

type record RecordAlias {
    alias: string,
    record: RecordType<AnyRecord>
}

type record RecordAttributeAlias {
    alias: string,
    record: RecordType<AnyRecord>,
    recordAttribute: string
}

type record ImplicitCollection {
    record: RecordType<AnyRecord>,
    recordAttribute: string
}

type record TagAttribute {
    record: RecordType<AnyRecord>,
    recordAttribute: string
}

type record XmlFile<T> {
    file: File,
    xml: T
}

fun newXmlMapping<T>(rootRecord: RecordType<T>): XmlMapping<T> {
    return XmlMapping<T>{
        rootRecord: rootRecord,
        aliases: [],
        attrAliases: [],
        implicitCollections: [],
        tagAttributes: []
    }
}

fun alias(xmlMapping: XmlMapping<AnyRecord>, alias: string, record: RecordType<AnyRecord>): void {
    xmlMapping.aliases.add(RecordAlias{ alias: alias, record: record })
}

fun aliasAttribute(xmlMapping: XmlMapping<AnyRecord>, alias: string, record: RecordType<AnyRecord>,
                   recordAttribute: string): void {
    xmlMapping.attrAliases.add(RecordAttributeAlias{
        alias: alias,
        record: record,
        recordAttribute: recordAttribute
    });
}

fun addImplicitCollection(xmlMapping: XmlMapping<AnyRecord>, record: RecordType<AnyRecord>,
                          recordAttribute: string): void {
    xmlMapping.implicitCollections.add(ImplicitCollection{
        record: record,
        recordAttribute: recordAttribute
    });
}

fun useAttributeFor(xmlMapping: XmlMapping<AnyRecord>, record: RecordType<AnyRecord>, recordAttribute: string): void {
    xmlMapping.tagAttributes.add(TagAttribute{
        record: record,
        recordAttribute: recordAttribute
    });
}

/*
 * Deserializes XML files using the given mapping configuration.
 *
 * The 'pattern' argument can be a single filename or a glob pattern (like "*.xml"). If 'recursive' is
 * true, then all subdirectories will be scanned. Use 'charset' to specify the file charset.
 */
def native readXml<T>(dir: Path, pattern: string, xmlMapping: XmlMapping<T>,
                      recursive?: boolean, charset?: string): XmlFile<T>[];

/**
 * Deserializes a single XML file, using the given mapping configuration
 */
fun readXmlFile<T>(xmlFilePath: string, xmlMapping: XmlMapping<T>, charset?: string): XmlFile<T> {
    var filePath = Path([xmlFilePath])
    var xmlFiles = readXml(filePath.getParent(), filePath.getFileName().toString(), xmlMapping, false, charset)
    if (xmlFiles.size() > 0) {
        return xmlFiles[0]
    }
    return null
}

/**
 * Serializes a value to XML using the given mapping configuration, and writes it to the specified file.
 */
def native writeXml<T>(file: File, value: T, xmlMapping: XmlMapping<T>, charset?: string): void;

/**
 * Serializes a value to XML using the given mapping configuration
 */
def native toXml<T>(value: T, xmlMapping: XmlMapping<T>): string;



